#!/opt/local/bin/perl

# Project Euler Problem #12
#
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

use strict;
use warnings;
require "/Users/don/bin/scripts/euler/functions.pm";

# Disable output buffering
select((select(STDOUT), $|=1)[0]);

my $tri_num = 0;
my @fac = ();
my $max_fac = 0;
my $max_fac_val = 0;
my $max_fac_idx = 1;
my $i = 0;

while (scalar(@fac) < 500) {
  $i++;
  $tri_num += $i;
  
  print '.' unless ($i % 100 == 0);
  
  if ($tri_num >= 2162160 || 1) {
    @fac = @{factors($tri_num)};
    
    if (scalar(@fac) > $max_fac) {
      
      print "\n[$i] $tri_num has " . scalar(@fac) . " factor(s)\n";
      $max_fac = scalar(@fac);
      $max_fac_val = $tri_num;
      $max_fac_idx = $i;
    }
    
    if (scalar(@fac) > 500) {
      print "\n\nAnswer: [$i] $tri_num = " . join(', ', sort{$a <=> $b} @fac) . "\n\n";
      last;
    }
  }
}


# Answer: 76576500